// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: websiteMonitor.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebsiteMonitorService_AutoMigrate_FullMethodName     = "/websiteMonitor.WebsiteMonitorService/AutoMigrate"
	WebsiteMonitorService_ExibeTodosSites_FullMethodName = "/websiteMonitor.WebsiteMonitorService/ExibeTodosSites"
	WebsiteMonitorService_CriaNovoSite_FullMethodName    = "/websiteMonitor.WebsiteMonitorService/CriaNovoSite"
	WebsiteMonitorService_DeletaSite_FullMethodName      = "/websiteMonitor.WebsiteMonitorService/DeletaSite"
	WebsiteMonitorService_EditaSite_FullMethodName       = "/websiteMonitor.WebsiteMonitorService/EditaSite"
	WebsiteMonitorService_IniciarRotina_FullMethodName   = "/websiteMonitor.WebsiteMonitorService/IniciarRotina"
	WebsiteMonitorService_PararRotina_FullMethodName     = "/websiteMonitor.WebsiteMonitorService/PararRotina"
)

// WebsiteMonitorServiceClient is the client API for WebsiteMonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebsiteMonitorServiceClient interface {
	AutoMigrate(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ResponseMessage, error)
	ExibeTodosSites(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SitesResponse, error)
	CriaNovoSite(ctx context.Context, in *SiteRequest, opts ...grpc.CallOption) (*SiteResponse, error)
	DeletaSite(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ResponseMessage, error)
	EditaSite(ctx context.Context, in *SiteEditRequest, opts ...grpc.CallOption) (*SiteResponse, error)
	IniciarRotina(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ResponseMessage, error)
	PararRotina(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ResponseMessage, error)
}

type websiteMonitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebsiteMonitorServiceClient(cc grpc.ClientConnInterface) WebsiteMonitorServiceClient {
	return &websiteMonitorServiceClient{cc}
}

func (c *websiteMonitorServiceClient) AutoMigrate(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, WebsiteMonitorService_AutoMigrate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websiteMonitorServiceClient) ExibeTodosSites(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SitesResponse, error) {
	out := new(SitesResponse)
	err := c.cc.Invoke(ctx, WebsiteMonitorService_ExibeTodosSites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websiteMonitorServiceClient) CriaNovoSite(ctx context.Context, in *SiteRequest, opts ...grpc.CallOption) (*SiteResponse, error) {
	out := new(SiteResponse)
	err := c.cc.Invoke(ctx, WebsiteMonitorService_CriaNovoSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websiteMonitorServiceClient) DeletaSite(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, WebsiteMonitorService_DeletaSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websiteMonitorServiceClient) EditaSite(ctx context.Context, in *SiteEditRequest, opts ...grpc.CallOption) (*SiteResponse, error) {
	out := new(SiteResponse)
	err := c.cc.Invoke(ctx, WebsiteMonitorService_EditaSite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websiteMonitorServiceClient) IniciarRotina(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, WebsiteMonitorService_IniciarRotina_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websiteMonitorServiceClient) PararRotina(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, WebsiteMonitorService_PararRotina_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsiteMonitorServiceServer is the server API for WebsiteMonitorService service.
// All implementations must embed UnimplementedWebsiteMonitorServiceServer
// for forward compatibility
type WebsiteMonitorServiceServer interface {
	AutoMigrate(context.Context, *EmptyRequest) (*ResponseMessage, error)
	ExibeTodosSites(context.Context, *EmptyRequest) (*SitesResponse, error)
	CriaNovoSite(context.Context, *SiteRequest) (*SiteResponse, error)
	DeletaSite(context.Context, *IdRequest) (*ResponseMessage, error)
	EditaSite(context.Context, *SiteEditRequest) (*SiteResponse, error)
	IniciarRotina(context.Context, *EmptyRequest) (*ResponseMessage, error)
	PararRotina(context.Context, *EmptyRequest) (*ResponseMessage, error)
	mustEmbedUnimplementedWebsiteMonitorServiceServer()
}

// UnimplementedWebsiteMonitorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebsiteMonitorServiceServer struct {
}

func (UnimplementedWebsiteMonitorServiceServer) AutoMigrate(context.Context, *EmptyRequest) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoMigrate not implemented")
}
func (UnimplementedWebsiteMonitorServiceServer) ExibeTodosSites(context.Context, *EmptyRequest) (*SitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExibeTodosSites not implemented")
}
func (UnimplementedWebsiteMonitorServiceServer) CriaNovoSite(context.Context, *SiteRequest) (*SiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CriaNovoSite not implemented")
}
func (UnimplementedWebsiteMonitorServiceServer) DeletaSite(context.Context, *IdRequest) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletaSite not implemented")
}
func (UnimplementedWebsiteMonitorServiceServer) EditaSite(context.Context, *SiteEditRequest) (*SiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditaSite not implemented")
}
func (UnimplementedWebsiteMonitorServiceServer) IniciarRotina(context.Context, *EmptyRequest) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IniciarRotina not implemented")
}
func (UnimplementedWebsiteMonitorServiceServer) PararRotina(context.Context, *EmptyRequest) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PararRotina not implemented")
}
func (UnimplementedWebsiteMonitorServiceServer) mustEmbedUnimplementedWebsiteMonitorServiceServer() {}

// UnsafeWebsiteMonitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebsiteMonitorServiceServer will
// result in compilation errors.
type UnsafeWebsiteMonitorServiceServer interface {
	mustEmbedUnimplementedWebsiteMonitorServiceServer()
}

func RegisterWebsiteMonitorServiceServer(s grpc.ServiceRegistrar, srv WebsiteMonitorServiceServer) {
	s.RegisterService(&WebsiteMonitorService_ServiceDesc, srv)
}

func _WebsiteMonitorService_AutoMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsiteMonitorServiceServer).AutoMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsiteMonitorService_AutoMigrate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsiteMonitorServiceServer).AutoMigrate(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsiteMonitorService_ExibeTodosSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsiteMonitorServiceServer).ExibeTodosSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsiteMonitorService_ExibeTodosSites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsiteMonitorServiceServer).ExibeTodosSites(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsiteMonitorService_CriaNovoSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsiteMonitorServiceServer).CriaNovoSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsiteMonitorService_CriaNovoSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsiteMonitorServiceServer).CriaNovoSite(ctx, req.(*SiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsiteMonitorService_DeletaSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsiteMonitorServiceServer).DeletaSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsiteMonitorService_DeletaSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsiteMonitorServiceServer).DeletaSite(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsiteMonitorService_EditaSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiteEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsiteMonitorServiceServer).EditaSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsiteMonitorService_EditaSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsiteMonitorServiceServer).EditaSite(ctx, req.(*SiteEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsiteMonitorService_IniciarRotina_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsiteMonitorServiceServer).IniciarRotina(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsiteMonitorService_IniciarRotina_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsiteMonitorServiceServer).IniciarRotina(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsiteMonitorService_PararRotina_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsiteMonitorServiceServer).PararRotina(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsiteMonitorService_PararRotina_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsiteMonitorServiceServer).PararRotina(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebsiteMonitorService_ServiceDesc is the grpc.ServiceDesc for WebsiteMonitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebsiteMonitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "websiteMonitor.WebsiteMonitorService",
	HandlerType: (*WebsiteMonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoMigrate",
			Handler:    _WebsiteMonitorService_AutoMigrate_Handler,
		},
		{
			MethodName: "ExibeTodosSites",
			Handler:    _WebsiteMonitorService_ExibeTodosSites_Handler,
		},
		{
			MethodName: "CriaNovoSite",
			Handler:    _WebsiteMonitorService_CriaNovoSite_Handler,
		},
		{
			MethodName: "DeletaSite",
			Handler:    _WebsiteMonitorService_DeletaSite_Handler,
		},
		{
			MethodName: "EditaSite",
			Handler:    _WebsiteMonitorService_EditaSite_Handler,
		},
		{
			MethodName: "IniciarRotina",
			Handler:    _WebsiteMonitorService_IniciarRotina_Handler,
		},
		{
			MethodName: "PararRotina",
			Handler:    _WebsiteMonitorService_PararRotina_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "websiteMonitor.proto",
}
